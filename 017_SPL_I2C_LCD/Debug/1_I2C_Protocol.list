
1_I2C_Protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000120c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001394  08001394  00011394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013b4  080013b4  000113b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013b8  080013b8  000113b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080013bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          000000c0  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000e0  200000e0  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000068b1  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000127d  00000000  00000000  00026901  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000800  00000000  00000000  00027b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000748  00000000  00000000  00028380  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002e04  00000000  00000000  00028ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a39  00000000  00000000  0002b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e305  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002110  00000000  00000000  0002e384  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00030494  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800137c 	.word	0x0800137c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	0800137c 	.word	0x0800137c

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e076      	b.n	80004f6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000408:	2201      	movs	r2, #1
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d165      	bne.n	80004f0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	2103      	movs	r1, #3
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d003      	beq.n	8000462 <GPIO_Init+0x76>
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d12e      	bne.n	80004c0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	2103      	movs	r1, #3
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	401a      	ands	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	4619      	mov	r1, r3
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b29b      	uxth	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	2301      	movs	r3, #1
 800049c:	408b      	lsls	r3, r1
 800049e:	43db      	mvns	r3, r3
 80004a0:	401a      	ands	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	7992      	ldrb	r2, [r2, #6]
 80004ae:	4611      	mov	r1, r2
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	b292      	uxth	r2, r2
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	2103      	movs	r1, #3
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	401a      	ands	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	79db      	ldrb	r3, [r3, #7]
 80004e0:	4619      	mov	r1, r3
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d985      	bls.n	8000408 <GPIO_Init+0x1c>
    }
  }
}
 80004fc:	bf00      	nop
 80004fe:	371c      	adds	r7, #28
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	691a      	ldr	r2, [r3, #16]
 800051c:	887b      	ldrh	r3, [r7, #2]
 800051e:	4013      	ands	r3, r2
 8000520:	2b00      	cmp	r3, #0
 8000522:	d002      	beq.n	800052a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e001      	b.n	800052e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	887a      	ldrh	r2, [r7, #2]
 800054c:	831a      	strh	r2, [r3, #24]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	887a      	ldrh	r2, [r7, #2]
 800056a:	835a      	strh	r2, [r3, #26]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	807b      	strh	r3, [r7, #2]
 8000584:	4613      	mov	r3, r2
 8000586:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000590:	787a      	ldrb	r2, [r7, #1]
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	f003 0307 	and.w	r3, r3, #7
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	887b      	ldrh	r3, [r7, #2]
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3208      	adds	r2, #8
 80005b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	210f      	movs	r1, #15
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43db      	mvns	r3, r3
 80005c8:	ea02 0103 	and.w	r1, r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f100 0208 	add.w	r2, r0, #8
 80005d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	08db      	lsrs	r3, r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3208      	adds	r2, #8
 80005e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3208      	adds	r2, #8
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	84fb      	strh	r3, [r7, #38]	; 0x26
 800061a:	2300      	movs	r3, #0
 800061c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800061e:	2304      	movs	r3, #4
 8000620:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000622:	4b57      	ldr	r3, [pc, #348]	; (8000780 <I2C_Init+0x174>)
 8000624:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	889b      	ldrh	r3, [r3, #4]
 800062a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800062c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800062e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000632:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f99b 	bl	8000974 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	4a4f      	ldr	r2, [pc, #316]	; (8000784 <I2C_Init+0x178>)
 8000646:	fba2 2303 	umull	r2, r3, r2, r3
 800064a:	0c9b      	lsrs	r3, r3, #18
 800064c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800064e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000652:	4313      	orrs	r3, r2
 8000654:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800065a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	b29b      	uxth	r3, r3
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	b29a      	uxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a44      	ldr	r2, [pc, #272]	; (8000788 <I2C_Init+0x17c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d815      	bhi.n	80006a6 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	69fa      	ldr	r2, [r7, #28]
 8000682:	fbb2 f3f3 	udiv	r3, r2, r3
 8000686:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068a:	2b03      	cmp	r3, #3
 800068c:	d801      	bhi.n	8000692 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800068e:	2304      	movs	r3, #4
 8000690:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000692:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000696:	4313      	orrs	r3, r2
 8000698:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800069a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800069c:	3301      	adds	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	841a      	strh	r2, [r3, #32]
 80006a4:	e040      	b.n	8000728 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	88db      	ldrh	r3, [r3, #6]
 80006aa:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d109      	bne.n	80006c6 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	69fa      	ldr	r2, [r7, #28]
 80006be:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80006c4:	e00e      	b.n	80006e4 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	009a      	lsls	r2, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	69fa      	ldr	r2, [r7, #28]
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80006dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80006e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d103      	bne.n	80006f6 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80006ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80006f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000706:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000708:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800070a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	4a1e      	ldr	r2, [pc, #120]	; (800078c <I2C_Init+0x180>)
 8000714:	fb82 1203 	smull	r1, r2, r2, r3
 8000718:	1192      	asrs	r2, r2, #6
 800071a:	17db      	asrs	r3, r3, #31
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	b29a      	uxth	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800072c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	b29a      	uxth	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000746:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800074a:	f023 0302 	bic.w	r3, r3, #2
 800074e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	889a      	ldrh	r2, [r3, #4]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	895b      	ldrh	r3, [r3, #10]
 8000758:	4313      	orrs	r3, r2
 800075a:	b29a      	uxth	r2, r3
 800075c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800075e:	4313      	orrs	r3, r2
 8000760:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000766:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	899a      	ldrh	r2, [r3, #12]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	891b      	ldrh	r3, [r3, #8]
 8000770:	4313      	orrs	r3, r2
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	811a      	strh	r2, [r3, #8]
}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	007a1200 	.word	0x007a1200
 8000784:	431bde83 	.word	0x431bde83
 8000788:	000186a0 	.word	0x000186a0
 800078c:	10624dd3 	.word	0x10624dd3

08000790 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d008      	beq.n	80007b4 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 80007b2:	e007      	b.n	80007c4 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	b29a      	uxth	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	801a      	strh	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d008      	beq.n	80007f4 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 80007f2:	e007      	b.n	8000804 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007fe:	b29a      	uxth	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	801a      	strh	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d008      	beq.n	8000834 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b29b      	uxth	r3, r3
 8000828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800082c:	b29a      	uxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000832:	e007      	b.n	8000844 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800083e:	b29a      	uxth	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	801a      	strh	r2, [r3, #0]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
 800085c:	4613      	mov	r3, r2
 800085e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000860:	78bb      	ldrb	r3, [r7, #2]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d004      	beq.n	8000870 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	70fb      	strb	r3, [r7, #3]
 800086e:	e003      	b.n	8000878 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	f023 0301 	bic.w	r3, r3, #1
 8000876:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	821a      	strh	r2, [r3, #16]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	b29a      	uxth	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	821a      	strh	r2, [r3, #16]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80008c2:	2300      	movs	r3, #0
 80008c4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	8a9b      	ldrh	r3, [r3, #20]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8b1b      	ldrh	r3, [r3, #24]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	041b      	lsls	r3, r3, #16
 80008da:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008e6:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	401a      	ands	r2, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d102      	bne.n	80008fa <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80008f4:	2301      	movs	r3, #1
 80008f6:	75fb      	strb	r3, [r7, #23]
 80008f8:	e001      	b.n	80008fe <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80008fa:	2300      	movs	r3, #0
 80008fc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000900:	4618      	mov	r0, r3
 8000902:	371c      	adds	r7, #28
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800090c:	b480      	push	{r7}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	0f1b      	lsrs	r3, r3, #28
 800092a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000932:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3314      	adds	r3, #20
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e005      	b.n	800094e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	0c1b      	lsrs	r3, r3, #16
 8000946:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3318      	adds	r3, #24
 800094c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	4013      	ands	r3, r2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800095a:	2301      	movs	r3, #1
 800095c:	75fb      	strb	r3, [r7, #23]
 800095e:	e001      	b.n	8000964 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000964:	7dfb      	ldrb	r3, [r7, #23]
}
 8000966:	4618      	mov	r0, r3
 8000968:	371c      	adds	r7, #28
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	2302      	movs	r3, #2
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	2302      	movs	r3, #2
 8000992:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000994:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f003 030c 	and.w	r3, r3, #12
 800099c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d007      	beq.n	80009b4 <RCC_GetClocksFreq+0x40>
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d009      	beq.n	80009bc <RCC_GetClocksFreq+0x48>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d13d      	bne.n	8000a28 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a42      	ldr	r2, [pc, #264]	; (8000ab8 <RCC_GetClocksFreq+0x144>)
 80009b0:	601a      	str	r2, [r3, #0]
      break;
 80009b2:	e03d      	b.n	8000a30 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a41      	ldr	r2, [pc, #260]	; (8000abc <RCC_GetClocksFreq+0x148>)
 80009b8:	601a      	str	r2, [r3, #0]
      break;
 80009ba:	e039      	b.n	8000a30 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80009bc:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	0d9b      	lsrs	r3, r3, #22
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009c8:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009d0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00c      	beq.n	80009f2 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009d8:	4a38      	ldr	r2, [pc, #224]	; (8000abc <RCC_GetClocksFreq+0x148>)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e0:	4a34      	ldr	r2, [pc, #208]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 80009e2:	6852      	ldr	r2, [r2, #4]
 80009e4:	0992      	lsrs	r2, r2, #6
 80009e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009ea:	fb02 f303 	mul.w	r3, r2, r3
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	e00b      	b.n	8000a0a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009f2:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <RCC_GetClocksFreq+0x144>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4a2e      	ldr	r2, [pc, #184]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 80009fc:	6852      	ldr	r2, [r2, #4]
 80009fe:	0992      	lsrs	r2, r2, #6
 8000a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a04:	fb02 f303 	mul.w	r3, r2, r3
 8000a08:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	3301      	adds	r3, #1
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000a1a:	69fa      	ldr	r2, [r7, #28]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
      break;
 8000a26:	e003      	b.n	8000a30 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <RCC_GetClocksFreq+0x144>)
 8000a2c:	601a      	str	r2, [r3, #0]
      break;
 8000a2e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a38:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	091b      	lsrs	r3, r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a40:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <RCC_GetClocksFreq+0x14c>)
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	40da      	lsrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a60:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	0a9b      	lsrs	r3, r3, #10
 8000a66:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a68:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <RCC_GetClocksFreq+0x14c>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	40da      	lsrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <RCC_GetClocksFreq+0x140>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	0b5b      	lsrs	r3, r3, #13
 8000a8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <RCC_GetClocksFreq+0x14c>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	40da      	lsrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	60da      	str	r2, [r3, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3724      	adds	r7, #36	; 0x24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	00f42400 	.word	0x00f42400
 8000abc:	007a1200 	.word	0x007a1200
 8000ac0:	20000000 	.word	0x20000000

08000ac4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000ad6:	490a      	ldr	r1, [pc, #40]	; (8000b00 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ae2:	e006      	b.n	8000af2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ae4:	4906      	ldr	r1, [pc, #24]	; (8000b00 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4013      	ands	r3, r2
 8000af0:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b16:	490a      	ldr	r1, [pc, #40]	; (8000b40 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000b22:	e006      	b.n	8000b32 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b24:	4906      	ldr	r1, [pc, #24]	; (8000b40 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	819a      	strh	r2, [r3, #12]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b085      	sub	sp, #20
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	891b      	ldrh	r3, [r3, #8]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000b82:	2301      	movs	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	e001      	b.n	8000b8c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000ba0:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <Audio_MAL_IRQHandler+0xe8>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <Audio_MAL_IRQHandler+0xec>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4610      	mov	r0, r2
 8000bac:	f7ff fbb4 	bl	8000318 <DMA_GetFlagStatus>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d064      	beq.n	8000c80 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <Audio_MAL_IRQHandler+0xf0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d04c      	beq.n	8000c58 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000bbe:	bf00      	nop
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <Audio_MAL_IRQHandler+0xe8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fb8f 	bl	80002e8 <DMA_GetCmdStatus>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f7      	bne.n	8000bc0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <Audio_MAL_IRQHandler+0xe8>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <Audio_MAL_IRQHandler+0xec>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4610      	mov	r0, r2
 8000bdc:	f7ff fbd8 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000be0:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <Audio_MAL_IRQHandler+0xf4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <Audio_MAL_IRQHandler+0xf8>)
 8000be8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <Audio_MAL_IRQHandler+0xf0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	bf28      	it	cs
 8000bf6:	4613      	movcs	r3, r2
 8000bf8:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <Audio_MAL_IRQHandler+0xf8>)
 8000bfa:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <Audio_MAL_IRQHandler+0xe8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4924      	ldr	r1, [pc, #144]	; (8000c94 <Audio_MAL_IRQHandler+0xf8>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fafc 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <Audio_MAL_IRQHandler+0xe8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fb4e 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <Audio_MAL_IRQHandler+0xf4>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <Audio_MAL_IRQHandler+0xf0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c20:	d203      	bcs.n	8000c2a <Audio_MAL_IRQHandler+0x8e>
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <Audio_MAL_IRQHandler+0xf0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	e000      	b.n	8000c2c <Audio_MAL_IRQHandler+0x90>
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <Audio_MAL_IRQHandler+0xfc>)
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <Audio_MAL_IRQHandler+0xf4>)
 8000c30:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <Audio_MAL_IRQHandler+0xf0>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <Audio_MAL_IRQHandler+0xf0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	bf28      	it	cs
 8000c42:	460b      	movcs	r3, r1
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <Audio_MAL_IRQHandler+0xf0>)
 8000c48:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <Audio_MAL_IRQHandler+0xe8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fb2d 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000c56:	e013      	b.n	8000c80 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <Audio_MAL_IRQHandler+0xe8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fb26 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <Audio_MAL_IRQHandler+0xe8>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <Audio_MAL_IRQHandler+0xec>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4610      	mov	r0, r2
 8000c70:	f7ff fb8e 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <Audio_MAL_IRQHandler+0xf4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fa3c 	bl	80010f8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000018 	.word	0x20000018
 8000c88:	2000001c 	.word	0x2000001c
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	20000040 	.word	0x20000040
 8000c94:	20000080 	.word	0x20000080
 8000c98:	0001fffe 	.word	0x0001fffe

08000c9c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000ca0:	f7ff ff7c 	bl	8000b9c <Audio_MAL_IRQHandler>
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000cac:	f7ff ff76 	bl	8000b9c <Audio_MAL_IRQHandler>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000cb8:	2102      	movs	r1, #2
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <SPI3_IRQHandler+0x3c>)
 8000cbc:	f7ff ff51 	bl	8000b62 <SPI_I2S_GetFlagStatus>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d011      	beq.n	8000cea <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <SPI3_IRQHandler+0x40>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d106      	bne.n	8000cdc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000cce:	f000 fa1e 	bl	800110e <EVAL_AUDIO_GetSampleCallBack>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f7ff fa76 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000cdc:	f000 fa17 	bl	800110e <EVAL_AUDIO_GetSampleCallBack>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <SPI3_IRQHandler+0x3c>)
 8000ce6:	f7ff ff2d 	bl	8000b44 <SPI_I2S_SendData>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40003c00 	.word	0x40003c00
 8000cf4:	20000014 	.word	0x20000014

08000cf8 <Delay>:

#include "MyLCD.h"

extern I2C_InitTypeDef I2C_InitStruct;

void Delay(void){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0

	int i=0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
	while(i<1000000){
 8000d02:	e002      	b.n	8000d0a <Delay+0x12>
		i++;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
	while(i<1000000){
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <Delay+0x28>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	ddf8      	ble.n	8000d04 <Delay+0xc>
	}
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	000f423f 	.word	0x000f423f

08000d24 <Display_Init>:


void Display_Init(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0


	DisplaySendCommand(0x02);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f000 f80b 	bl	8000d44 <DisplaySendCommand>
	DisplaySendCommand(0x28);
 8000d2e:	2028      	movs	r0, #40	; 0x28
 8000d30:	f000 f808 	bl	8000d44 <DisplaySendCommand>
	DisplaySendCommand(0x0D);
 8000d34:	200d      	movs	r0, #13
 8000d36:	f000 f805 	bl	8000d44 <DisplaySendCommand>
	DisplaySendCommand(0x80);
 8000d3a:	2080      	movs	r0, #128	; 0x80
 8000d3c:	f000 f802 	bl	8000d44 <DisplaySendCommand>
	Delay();
	DisplaySendCommand(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)

	*/

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <DisplaySendCommand>:

void DisplaySendCommand(char cmd){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]

	char data_up, data_low;
	uint8_t datas[4];

	data_up = cmd & 0xF0;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f023 030f 	bic.w	r3, r3, #15
 8000d54:	74fb      	strb	r3, [r7, #19]
	data_low = (cmd<<4) & 0xF0;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	74bb      	strb	r3, [r7, #18]

	datas[0] = data_up | 0x0C;
 8000d5c:	7cfb      	ldrb	r3, [r7, #19]
 8000d5e:	f043 030c 	orr.w	r3, r3, #12
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	733b      	strb	r3, [r7, #12]
	datas[1] = data_up | 0x08;
 8000d66:	7cfb      	ldrb	r3, [r7, #19]
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	737b      	strb	r3, [r7, #13]
	datas[2] = data_low | 0x0C;
 8000d70:	7cbb      	ldrb	r3, [r7, #18]
 8000d72:	f043 030c 	orr.w	r3, r3, #12
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	73bb      	strb	r3, [r7, #14]
	datas[3] = data_low | 0x08;
 8000d7a:	7cbb      	ldrb	r3, [r7, #18]
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	73fb      	strb	r3, [r7, #15]

	for(int i=0; i<4; i++){
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e00b      	b.n	8000da2 <DisplaySendCommand+0x5e>
		I2C_Write(SLAVEADRESS, datas[i]);
 8000d8a:	f107 020c 	add.w	r2, r7, #12
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	204e      	movs	r0, #78	; 0x4e
 8000d98:	f000 f90c 	bl	8000fb4 <I2C_Write>
	for(int i=0; i<4; i++){
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	ddf0      	ble.n	8000d8a <DisplaySendCommand+0x46>
	}

}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <DisplaySendData>:


void DisplaySendData(char data){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]

	char data_up, data_low;
	uint8_t datas[4];

	data_up = data & 0xF0;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f023 030f 	bic.w	r3, r3, #15
 8000dc0:	74fb      	strb	r3, [r7, #19]
	data_low = (data<<4) & 0xF0;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	74bb      	strb	r3, [r7, #18]

	datas[0] = data_up | 0x0D; //en=1, rs=1			//0101 0000 | 0000 1101 = 0101 1101
 8000dc8:	7cfb      	ldrb	r3, [r7, #19]
 8000dca:	f043 030d 	orr.w	r3, r3, #13
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	733b      	strb	r3, [r7, #12]
	datas[1] = data_up | 0x09;  //en=0, rs=1		//0101 0000 | 0000 1001
 8000dd2:	7cfb      	ldrb	r3, [r7, #19]
 8000dd4:	f043 0309 	orr.w	r3, r3, #9
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	737b      	strb	r3, [r7, #13]
	datas[2] = data_low | 0x0D;  //en=1, rs=1
 8000ddc:	7cbb      	ldrb	r3, [r7, #18]
 8000dde:	f043 030d 	orr.w	r3, r3, #13
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	73bb      	strb	r3, [r7, #14]
	datas[3] = data_low | 0x09;  //en=0, rs=1
 8000de6:	7cbb      	ldrb	r3, [r7, #18]
 8000de8:	f043 0309 	orr.w	r3, r3, #9
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	73fb      	strb	r3, [r7, #15]

	for(int i=0; i<4; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e00b      	b.n	8000e0e <DisplaySendData+0x5e>
		I2C_Write(SLAVEADRESS, datas[i]);
 8000df6:	f107 020c 	add.w	r2, r7, #12
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	204e      	movs	r0, #78	; 0x4e
 8000e04:	f000 f8d6 	bl	8000fb4 <I2C_Write>
	for(int i=0; i<4; i++){
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	ddf0      	ble.n	8000df6 <DisplaySendData+0x46>
	}

}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <DisplaySendString>:

void DisplaySendString(char *str){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	while(*str){
 8000e24:	e007      	b.n	8000e36 <DisplaySendString+0x1a>
		DisplaySendData(*str);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ffc0 	bl	8000db0 <DisplaySendData>
		str++;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
	while(*str){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f3      	bne.n	8000e26 <DisplaySendString+0xa>
	}
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <DisplayPutCursor>:

void DisplayPutCursor(int row, int col){
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]

	switch(row){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d002      	beq.n	8000e5c <DisplayPutCursor+0x16>
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d00a      	beq.n	8000e70 <DisplayPutCursor+0x2a>
	case 2:
		col = col | 0xC0;
		DisplaySendCommand(col);
		break;
	}
}
 8000e5a:	e013      	b.n	8000e84 <DisplayPutCursor+0x3e>
		col = col | 0x80;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e62:	603b      	str	r3, [r7, #0]
		DisplaySendCommand(col);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff6b 	bl	8000d44 <DisplaySendCommand>
		break;
 8000e6e:	e009      	b.n	8000e84 <DisplayPutCursor+0x3e>
		col = col | 0xC0;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e76:	603b      	str	r3, [r7, #0]
		DisplaySendCommand(col);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff61 	bl	8000d44 <DisplaySendCommand>
		break;
 8000e82:	bf00      	nop
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <DisplayClear>:
	int value2 = trunc(temp2 * 10000);

	sprintf(str, "%s%d.%d", chr, value1, value2);
}

void DisplayClear(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	DisplaySendCommand(0x01);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff ff57 	bl	8000d44 <DisplaySendCommand>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <LED_Config>:
I2C_InitTypeDef I2C_InitStruct;

char I2C_Buffer[10];
int i=0, counter = 0;

void LED_Config(void){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2008      	movs	r0, #8
 8000ea4:	f7ff fe0e 	bl	8000ac4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <LED_Config+0x60>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <LED_Config+0x60>)
 8000eb0:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000eb4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <LED_Config+0x60>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <LED_Config+0x60>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <LED_Config+0x60>)
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <LED_Config+0x60>)
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LED_Config+0x64>)
 8000ecc:	f7ff fa8e 	bl	80003ec <GPIO_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fdf6 	bl	8000ac4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <LED_Config+0x60>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <LED_Config+0x60>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <LED_Config+0x60>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <LED_Config+0x60>)
 8000eec:	2203      	movs	r2, #3
 8000eee:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	4902      	ldr	r1, [pc, #8]	; (8000efc <LED_Config+0x60>)
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <LED_Config+0x68>)
 8000ef4:	f7ff fa7a 	bl	80003ec <GPIO_Init>

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000bc 	.word	0x200000bc
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40020000 	.word	0x40020000

08000f08 <GPIO_Config>:

void GPIO_Config(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fdd8 	bl	8000ac4 <RCC_AHB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);		//PB6 -> SCL,
 8000f14:	2204      	movs	r2, #4
 8000f16:	2106      	movs	r1, #6
 8000f18:	480e      	ldr	r0, [pc, #56]	; (8000f54 <GPIO_Config+0x4c>)
 8000f1a:	f7ff fb2d 	bl	8000578 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1);		//PB7 -> SDA
 8000f1e:	2204      	movs	r2, #4
 8000f20:	2107      	movs	r1, #7
 8000f22:	480c      	ldr	r0, [pc, #48]	; (8000f54 <GPIO_Config+0x4c>)
 8000f24:	f7ff fb28 	bl	8000578 <GPIO_PinAFConfig>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <GPIO_Config+0x50>)
 8000f2a:	22c0      	movs	r2, #192	; 0xc0
 8000f2c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <GPIO_Config+0x50>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <GPIO_Config+0x50>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <GPIO_Config+0x50>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <GPIO_Config+0x50>)
 8000f42:	2203      	movs	r2, #3
 8000f44:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	4904      	ldr	r1, [pc, #16]	; (8000f58 <GPIO_Config+0x50>)
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <GPIO_Config+0x4c>)
 8000f4a:	f7ff fa4f 	bl	80003ec <GPIO_Init>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020400 	.word	0x40020400
 8000f58:	200000bc 	.word	0x200000bc

08000f5c <I2C_Config>:

void I2C_Config(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000f60:	2101      	movs	r1, #1
 8000f62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f66:	f7ff fdcd 	bl	8000b04 <RCC_APB1PeriphClockCmd>

	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <I2C_Config+0x4c>)
 8000f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f70:	815a      	strh	r2, [r3, #10]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <I2C_Config+0x4c>)
 8000f74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f78:	819a      	strh	r2, [r3, #12]
	I2C_InitStruct.I2C_ClockSpeed = 400000;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <I2C_Config+0x4c>)
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <I2C_Config+0x50>)
 8000f7e:	601a      	str	r2, [r3, #0]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <I2C_Config+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	809a      	strh	r2, [r3, #4]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <I2C_Config+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	811a      	strh	r2, [r3, #8]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <I2C_Config+0x4c>)
 8000f8e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000f92:	80da      	strh	r2, [r3, #6]

	I2C_Init(I2C1, &I2C_InitStruct);
 8000f94:	4904      	ldr	r1, [pc, #16]	; (8000fa8 <I2C_Config+0x4c>)
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <I2C_Config+0x54>)
 8000f98:	f7ff fb38 	bl	800060c <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <I2C_Config+0x54>)
 8000fa0:	f7ff fbf6 	bl	8000790 <I2C_Cmd>

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000c4 	.word	0x200000c4
 8000fac:	00061a80 	.word	0x00061a80
 8000fb0:	40005400 	.word	0x40005400

08000fb4 <I2C_Write>:

void I2C_Write(uint8_t address, uint8_t data){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	71bb      	strb	r3, [r7, #6]


	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));									//SDA hatti mesgul mu, degil mi? if 1-> wait else 0-> continue.
 8000fc4:	bf00      	nop
 8000fc6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000fca:	481a      	ldr	r0, [pc, #104]	; (8001034 <I2C_Write+0x80>)
 8000fcc:	f7ff fc9e 	bl	800090c <I2C_GetFlagStatus>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f7      	bne.n	8000fc6 <I2C_Write+0x12>
	I2C_GenerateSTART(I2C1, ENABLE);												//I2C' yi baslatma komutu gondererek baslatiyorum.	HIGH -> LOW
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4816      	ldr	r0, [pc, #88]	; (8001034 <I2C_Write+0x80>)
 8000fda:	f7ff fbf9 	bl	80007d0 <I2C_GenerateSTART>
	while(!(I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)));					//MASTER Mode secilene kadar bekle.
 8000fde:	bf00      	nop
 8000fe0:	4915      	ldr	r1, [pc, #84]	; (8001038 <I2C_Write+0x84>)
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <I2C_Write+0x80>)
 8000fe4:	f7ff fc62 	bl	80008ac <I2C_CheckEvent>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f8      	beq.n	8000fe0 <I2C_Write+0x2c>
	I2C_Send7bitAddress(I2C1, address, I2C_Direction_Transmitter);					//Slave cihaz iletisimi icin adres bilgisi gonderiyorum.
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480f      	ldr	r0, [pc, #60]	; (8001034 <I2C_Write+0x80>)
 8000ff6:	f7ff fc2b 	bl	8000850 <I2C_Send7bitAddress>
	while(!(I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)));		//Adres iletimi gerceklesti mi?.
 8000ffa:	bf00      	nop
 8000ffc:	490f      	ldr	r1, [pc, #60]	; (800103c <I2C_Write+0x88>)
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <I2C_Write+0x80>)
 8001000:	f7ff fc54 	bl	80008ac <I2C_CheckEvent>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f8      	beq.n	8000ffc <I2C_Write+0x48>
	I2C_SendData(I2C1, data);
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	4619      	mov	r1, r3
 800100e:	4809      	ldr	r0, [pc, #36]	; (8001034 <I2C_Write+0x80>)
 8001010:	f7ff fc3c 	bl	800088c <I2C_SendData>
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));				//mesaj iletimi bitti mi?
 8001014:	bf00      	nop
 8001016:	490a      	ldr	r1, [pc, #40]	; (8001040 <I2C_Write+0x8c>)
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <I2C_Write+0x80>)
 800101a:	f7ff fc47 	bl	80008ac <I2C_CheckEvent>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f8      	beq.n	8001016 <I2C_Write+0x62>

	I2C_GenerateSTOP(I2C1, ENABLE);
 8001024:	2101      	movs	r1, #1
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <I2C_Write+0x80>)
 8001028:	f7ff fbf2 	bl	8000810 <I2C_GenerateSTOP>

}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40005400 	.word	0x40005400
 8001038:	00030001 	.word	0x00030001
 800103c:	00070082 	.word	0x00070082
 8001040:	00070084 	.word	0x00070084

08001044 <main>:

}


int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

	GPIO_Config();
 8001048:	f7ff ff5e 	bl	8000f08 <GPIO_Config>
	I2C_Config();
 800104c:	f7ff ff86 	bl	8000f5c <I2C_Config>
	Display_Init();
 8001050:	f7ff fe68 	bl	8000d24 <Display_Init>
	LED_Config();
 8001054:	f7ff ff22 	bl	8000e9c <LED_Config>

	DisplayClear();
 8001058:	f7ff ff18 	bl	8000e8c <DisplayClear>
	Delay();
 800105c:	f7ff fe4c 	bl	8000cf8 <Delay>
	DisplayPutCursor(1, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff feef 	bl	8000e46 <DisplayPutCursor>
	Delay();
 8001068:	f7ff fe46 	bl	8000cf8 <Delay>


  while (1)
  {

	  if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)){
 800106c:	2101      	movs	r1, #1
 800106e:	481d      	ldr	r0, [pc, #116]	; (80010e4 <main+0xa0>)
 8001070:	f7ff fa4a 	bl	8000508 <GPIO_ReadInputDataBit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d014      	beq.n	80010a4 <main+0x60>
		  while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0));
 800107a:	bf00      	nop
 800107c:	2101      	movs	r1, #1
 800107e:	4819      	ldr	r0, [pc, #100]	; (80010e4 <main+0xa0>)
 8001080:	f7ff fa42 	bl	8000508 <GPIO_ReadInputDataBit>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f8      	bne.n	800107c <main+0x38>
		  if(counter < 2){
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <main+0xa4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	dc05      	bgt.n	800109e <main+0x5a>
			  counter++;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <main+0xa4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <main+0xa4>)
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e002      	b.n	80010a4 <main+0x60>
		  }
		  else{
			  counter = 1;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <main+0xa4>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
		  }
	  }
	  switch(counter){
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <main+0xa4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d002      	beq.n	80010b2 <main+0x6e>
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d00c      	beq.n	80010ca <main+0x86>
 80010b0:	e017      	b.n	80010e2 <main+0x9e>
	  case 1:
		  GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 80010b2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <main+0xa8>)
 80010b8:	f7ff fa40 	bl	800053c <GPIO_SetBits>
		  DisplaySendCommand(0x80);
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f7ff fe41 	bl	8000d44 <DisplaySendCommand>
		  DisplaySendString("LedLer Yandi");
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <main+0xac>)
 80010c4:	f7ff feaa 	bl	8000e1c <DisplaySendString>
		  break;
 80010c8:	e00b      	b.n	80010e2 <main+0x9e>
	  case 2:
	  		  GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 80010ca:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <main+0xa8>)
 80010d0:	f7ff fa43 	bl	800055a <GPIO_ResetBits>
	  		  DisplaySendCommand(0x80);
 80010d4:	2080      	movs	r0, #128	; 0x80
 80010d6:	f7ff fe35 	bl	8000d44 <DisplaySendCommand>
	  		  DisplaySendString("Ledler Sondu");
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <main+0xb0>)
 80010dc:	f7ff fe9e 	bl	8000e1c <DisplaySendString>
	  		  break;
 80010e0:	bf00      	nop
	  if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)){
 80010e2:	e7c3      	b.n	800106c <main+0x28>
 80010e4:	40020000 	.word	0x40020000
 80010e8:	2000003c 	.word	0x2000003c
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	08001394 	.word	0x08001394
 80010f4:	080013a4 	.word	0x080013a4

080010f8 <EVAL_AUDIO_TransferComplete_CallBack>:

}



void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8001102:	bf00      	nop
}
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001112:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001126:	e003      	b.n	8001130 <LoopCopyDataInit>

08001128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800112a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800112c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800112e:	3104      	adds	r1, #4

08001130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001138:	d3f6      	bcc.n	8001128 <CopyDataInit>
  ldr  r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800113c:	e002      	b.n	8001144 <LoopFillZerobss>

0800113e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800113e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001140:	f842 3b04 	str.w	r3, [r2], #4

08001144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001148:	d3f9      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114a:	f000 f841 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f000 f8f1 	bl	8001334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff ff77 	bl	8001044 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800115c:	080013bc 	.word	0x080013bc
  ldr  r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001164:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001168:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 800116c:	200000e0 	.word	0x200000e0

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>

08001172 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001184:	e7fe      	b.n	8001184 <HardFault_Handler+0x4>

08001186 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800118a:	e7fe      	b.n	800118a <MemManage_Handler+0x4>

0800118c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001190:	e7fe      	b.n	8001190 <BusFault_Handler+0x4>

08001192 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001196:	e7fe      	b.n	8001196 <UsageFault_Handler+0x4>

08001198 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4a16      	ldr	r2, [pc, #88]	; (8001230 <SystemInit+0x60>)
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <SystemInit+0x60>)
 80011d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011e4:	4a13      	ldr	r2, [pc, #76]	; (8001234 <SystemInit+0x64>)
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <SystemInit+0x64>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <SystemInit+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <SystemInit+0x64>)
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <SystemInit+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <SystemInit+0x64>)
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <SystemInit+0x68>)
 800120a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800120c:	4a09      	ldr	r2, [pc, #36]	; (8001234 <SystemInit+0x64>)
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <SystemInit+0x64>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001216:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800121e:	f000 f80d 	bl	800123c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001222:	4b03      	ldr	r3, [pc, #12]	; (8001230 <SystemInit+0x60>)
 8001224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001228:	609a      	str	r2, [r3, #8]
#endif
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	40023800 	.word	0x40023800
 8001238:	24003010 	.word	0x24003010

0800123c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800124a:	4a36      	ldr	r2, [pc, #216]	; (8001324 <SetSysClock+0xe8>)
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <SetSysClock+0xe8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <SetSysClock+0xe8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3301      	adds	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d103      	bne.n	8001274 <SetSysClock+0x38>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001272:	d1f0      	bne.n	8001256 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <SetSysClock+0xe8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001280:	2301      	movs	r3, #1
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	e001      	b.n	800128a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d142      	bne.n	8001316 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <SetSysClock+0xe8>)
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <SetSysClock+0xe8>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <SetSysClock+0xec>)
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <SetSysClock+0xec>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80012a8:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <SetSysClock+0xe8>)
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <SetSysClock+0xe8>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <SetSysClock+0xe8>)
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <SetSysClock+0xe8>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ba:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <SetSysClock+0xe8>)
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <SetSysClock+0xe8>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80012c6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <SetSysClock+0xe8>)
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <SetSysClock+0xf0>)
 80012cc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <SetSysClock+0xe8>)
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <SetSysClock+0xe8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012da:	bf00      	nop
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <SetSysClock+0xe8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f9      	beq.n	80012dc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <SetSysClock+0xf4>)
 80012ea:	f240 6205 	movw	r2, #1541	; 0x605
 80012ee:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <SetSysClock+0xe8>)
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <SetSysClock+0xe8>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f023 0303 	bic.w	r3, r3, #3
 80012fa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80012fc:	4a09      	ldr	r2, [pc, #36]	; (8001324 <SetSysClock+0xe8>)
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <SetSysClock+0xe8>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001308:	bf00      	nop
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SetSysClock+0xe8>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b08      	cmp	r3, #8
 8001314:	d1f9      	bne.n	800130a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000
 800132c:	07405408 	.word	0x07405408
 8001330:	40023c00 	.word	0x40023c00

08001334 <__libc_init_array>:
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	4e0d      	ldr	r6, [pc, #52]	; (800136c <__libc_init_array+0x38>)
 8001338:	4c0d      	ldr	r4, [pc, #52]	; (8001370 <__libc_init_array+0x3c>)
 800133a:	1ba4      	subs	r4, r4, r6
 800133c:	10a4      	asrs	r4, r4, #2
 800133e:	2500      	movs	r5, #0
 8001340:	42a5      	cmp	r5, r4
 8001342:	d109      	bne.n	8001358 <__libc_init_array+0x24>
 8001344:	4e0b      	ldr	r6, [pc, #44]	; (8001374 <__libc_init_array+0x40>)
 8001346:	4c0c      	ldr	r4, [pc, #48]	; (8001378 <__libc_init_array+0x44>)
 8001348:	f000 f818 	bl	800137c <_init>
 800134c:	1ba4      	subs	r4, r4, r6
 800134e:	10a4      	asrs	r4, r4, #2
 8001350:	2500      	movs	r5, #0
 8001352:	42a5      	cmp	r5, r4
 8001354:	d105      	bne.n	8001362 <__libc_init_array+0x2e>
 8001356:	bd70      	pop	{r4, r5, r6, pc}
 8001358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800135c:	4798      	blx	r3
 800135e:	3501      	adds	r5, #1
 8001360:	e7ee      	b.n	8001340 <__libc_init_array+0xc>
 8001362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001366:	4798      	blx	r3
 8001368:	3501      	adds	r5, #1
 800136a:	e7f2      	b.n	8001352 <__libc_init_array+0x1e>
 800136c:	080013b4 	.word	0x080013b4
 8001370:	080013b4 	.word	0x080013b4
 8001374:	080013b4 	.word	0x080013b4
 8001378:	080013b8 	.word	0x080013b8

0800137c <_init>:
 800137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137e:	bf00      	nop
 8001380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001382:	bc08      	pop	{r3}
 8001384:	469e      	mov	lr, r3
 8001386:	4770      	bx	lr

08001388 <_fini>:
 8001388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138a:	bf00      	nop
 800138c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800138e:	bc08      	pop	{r3}
 8001390:	469e      	mov	lr, r3
 8001392:	4770      	bx	lr
